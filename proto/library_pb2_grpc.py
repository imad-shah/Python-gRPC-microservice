# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from proto import library_pb2 as proto_dot_library__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in proto/library_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LibraryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetBooks = channel.unary_unary(
                '/Library/GetBooks',
                request_serializer=proto_dot_library__pb2.GetBooksRequest.SerializeToString,
                response_deserializer=proto_dot_library__pb2.GetBooksResponse.FromString,
                _registered_method=True)
        self.GetInventorySummary = channel.unary_unary(
                '/Library/GetInventorySummary',
                request_serializer=proto_dot_library__pb2.GetInventorySummaryRequest.SerializeToString,
                response_deserializer=proto_dot_library__pb2.GetInventorySummaryResponse.FromString,
                _registered_method=True)
        self.GetBookCount = channel.unary_unary(
                '/Library/GetBookCount',
                request_serializer=proto_dot_library__pb2.GetBookCountRequest.SerializeToString,
                response_deserializer=proto_dot_library__pb2.GetBookCountResponse.FromString,
                _registered_method=True)
        self.CheckoutBook = channel.unary_unary(
                '/Library/CheckoutBook',
                request_serializer=proto_dot_library__pb2.CheckoutBookRequest.SerializeToString,
                response_deserializer=proto_dot_library__pb2.CheckoutBookResponse.FromString,
                _registered_method=True)
        self.ReturnBook = channel.unary_unary(
                '/Library/ReturnBook',
                request_serializer=proto_dot_library__pb2.ReturnBookRequest.SerializeToString,
                response_deserializer=proto_dot_library__pb2.ReturnBookResponse.FromString,
                _registered_method=True)
        self.RegisterPatron = channel.unary_unary(
                '/Library/RegisterPatron',
                request_serializer=proto_dot_library__pb2.RegisterPatronRequest.SerializeToString,
                response_deserializer=proto_dot_library__pb2.RegisterPatronResponse.FromString,
                _registered_method=True)


class LibraryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetBooks(self, request, context):
        """What books are currently checked out
        Finds a patron by name, then returns their books from nosql mongodb
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInventorySummary(self, request, context):
        """Fetches all available data from sql database pertaining to library
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBookCount(self, request, context):
        """How many of a certain book is remaining in the Library
        Returns copies_remaining in sql db
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckoutBook(self, request, context):
        """Checkout a book from mysql db, put it in the nosql db for each patron, return an error if 0 copies remaining in sql
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReturnBook(self, request, context):
        """Opposite of checkout book
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterPatron(self, request, context):
        """Registering a new patron
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LibraryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetBooks': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBooks,
                    request_deserializer=proto_dot_library__pb2.GetBooksRequest.FromString,
                    response_serializer=proto_dot_library__pb2.GetBooksResponse.SerializeToString,
            ),
            'GetInventorySummary': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInventorySummary,
                    request_deserializer=proto_dot_library__pb2.GetInventorySummaryRequest.FromString,
                    response_serializer=proto_dot_library__pb2.GetInventorySummaryResponse.SerializeToString,
            ),
            'GetBookCount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBookCount,
                    request_deserializer=proto_dot_library__pb2.GetBookCountRequest.FromString,
                    response_serializer=proto_dot_library__pb2.GetBookCountResponse.SerializeToString,
            ),
            'CheckoutBook': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckoutBook,
                    request_deserializer=proto_dot_library__pb2.CheckoutBookRequest.FromString,
                    response_serializer=proto_dot_library__pb2.CheckoutBookResponse.SerializeToString,
            ),
            'ReturnBook': grpc.unary_unary_rpc_method_handler(
                    servicer.ReturnBook,
                    request_deserializer=proto_dot_library__pb2.ReturnBookRequest.FromString,
                    response_serializer=proto_dot_library__pb2.ReturnBookResponse.SerializeToString,
            ),
            'RegisterPatron': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterPatron,
                    request_deserializer=proto_dot_library__pb2.RegisterPatronRequest.FromString,
                    response_serializer=proto_dot_library__pb2.RegisterPatronResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Library', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Library', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Library(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetBooks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Library/GetBooks',
            proto_dot_library__pb2.GetBooksRequest.SerializeToString,
            proto_dot_library__pb2.GetBooksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetInventorySummary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Library/GetInventorySummary',
            proto_dot_library__pb2.GetInventorySummaryRequest.SerializeToString,
            proto_dot_library__pb2.GetInventorySummaryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBookCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Library/GetBookCount',
            proto_dot_library__pb2.GetBookCountRequest.SerializeToString,
            proto_dot_library__pb2.GetBookCountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckoutBook(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Library/CheckoutBook',
            proto_dot_library__pb2.CheckoutBookRequest.SerializeToString,
            proto_dot_library__pb2.CheckoutBookResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReturnBook(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Library/ReturnBook',
            proto_dot_library__pb2.ReturnBookRequest.SerializeToString,
            proto_dot_library__pb2.ReturnBookResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterPatron(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Library/RegisterPatron',
            proto_dot_library__pb2.RegisterPatronRequest.SerializeToString,
            proto_dot_library__pb2.RegisterPatronResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
